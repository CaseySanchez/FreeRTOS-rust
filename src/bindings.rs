/* automatically generated by rust-bindgen */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 1;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 1;
pub const configTICK_RATE_HZ: u32 = 1000;
pub const configMAX_TASK_NAME_LEN: u32 = 12;
pub const configUSE_TRACE_FACILITY: u32 = 1;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 1;
pub const configUSE_MUTEXES: u32 = 1;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 0;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configQUEUE_REGISTRY_SIZE: u32 = 20;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 1;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configUSE_QUEUE_SETS: u32 = 1;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 1;
pub const configSTREAM_BUFFER_TRIGGER_LEVEL_TEST_MARGIN: u32 = 1;
pub const configUSE_TIMERS: u32 = 1;
pub const configTIMER_QUEUE_LENGTH: u32 = 20;
pub const configMAX_PRIORITIES: u32 = 7;
pub const configGENERATE_RUN_TIME_STATS: u32 = 1;
pub const configUSE_CO_ROUTINES: u32 = 1;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 1;
pub const INCLUDE_vTaskPrioritySet: u32 = 1;
pub const INCLUDE_uxTaskPriorityGet: u32 = 1;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 1;
pub const INCLUDE_xTimerGetTimerDaemonTaskHandle: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 1;
pub const INCLUDE_xTaskGetHandle: u32 = 1;
pub const INCLUDE_eTaskGetState: u32 = 1;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 1;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 1;
pub const INCLUDE_xTaskAbortDelay: u32 = 1;
pub const configINCLUDE_MESSAGE_BUFFER_AMP_DEMO: u32 = 0;
pub const TRC_FREE_RUNNING_32BIT_INCR: u32 = 1;
pub const TRC_FREE_RUNNING_32BIT_DECR: u32 = 2;
pub const TRC_OS_TIMER_INCR: u32 = 3;
pub const TRC_OS_TIMER_DECR: u32 = 4;
pub const TRC_CUSTOM_TIMER_INCR: u32 = 5;
pub const TRC_CUSTOM_TIMER_DECR: u32 = 6;
pub const TRC_INIT: u32 = 0;
pub const TRC_START: u32 = 1;
pub const TRC_START_AWAIT_HOST: u32 = 2;
pub const CMD_SET_ACTIVE: u32 = 1;
pub const CMD_LAST_COMMAND: u32 = 1;
pub const TRC_RECORDER_MODE_SNAPSHOT: u32 = 0;
pub const TRC_RECORDER_MODE_STREAMING: u32 = 1;
pub const TRC_RECORDER_BUFFER_ALLOCATION_STATIC: u32 = 0;
pub const TRC_RECORDER_BUFFER_ALLOCATION_DYNAMIC: u32 = 1;
pub const TRC_RECORDER_BUFFER_ALLOCATION_CUSTOM: u32 = 2;
pub const TRC_HARDWARE_PORT_APPLICATION_DEFINED: u32 = 98;
pub const TRC_HARDWARE_PORT_NOT_SET: u32 = 99;
pub const TRC_HARDWARE_PORT_HWIndependent: u32 = 0;
pub const TRC_HARDWARE_PORT_Win32: u32 = 1;
pub const TRC_HARDWARE_PORT_Atmel_AT91SAM7: u32 = 2;
pub const TRC_HARDWARE_PORT_Atmel_UC3A0: u32 = 3;
pub const TRC_HARDWARE_PORT_ARM_Cortex_M: u32 = 4;
pub const TRC_HARDWARE_PORT_Renesas_RX600: u32 = 6;
pub const TRC_HARDWARE_PORT_MICROCHIP_PIC24_PIC32: u32 = 7;
pub const TRC_HARDWARE_PORT_TEXAS_INSTRUMENTS_TMS570_RM48: u32 = 8;
pub const TRC_HARDWARE_PORT_TEXAS_INSTRUMENTS_MSP430: u32 = 9;
pub const TRC_HARDWARE_PORT_XILINX_PPC405: u32 = 11;
pub const TRC_HARDWARE_PORT_XILINX_PPC440: u32 = 12;
pub const TRC_HARDWARE_PORT_XILINX_MICROBLAZE: u32 = 13;
pub const TRC_HARDWARE_PORT_NXP_LPC210X: u32 = 14;
pub const TRC_HARDWARE_PORT_ARM_CORTEX_A9: u32 = 15;
pub const TRC_HARDWARE_PORT_POWERPC_Z4: u32 = 16;
pub const TRC_HARDWARE_PORT_Altera_NiosII: u32 = 17;
pub const TRC_CFG_HARDWARE_PORT: u32 = 1;
pub const TRC_CFG_RECORDER_MODE: u32 = 0;
pub const TRC_CFG_SCHEDULING_ONLY: u32 = 0;
pub const TRC_CFG_INCLUDE_MEMMANG_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_USER_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_ISR_TRACING: u32 = 1;
pub const TRC_CFG_INCLUDE_READY_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_OSTICK_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_EVENT_GROUP_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_TIMER_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_PEND_FUNC_CALL_EVENTS: u32 = 1;
pub const TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS: u32 = 1;
pub const TRC_CFG_RECORDER_BUFFER_ALLOCATION: u32 = 0;
pub const TRC_CFG_MAX_ISR_NESTING: u32 = 8;
pub const TRC_SNAPSHOT_MODE_RING_BUFFER: u32 = 1;
pub const TRC_SNAPSHOT_MODE_STOP_WHEN_FULL: u32 = 2;
pub const TRC_CFG_SNAPSHOT_MODE: u32 = 1;
pub const TRC_CFG_EVENT_BUFFER_SIZE: u32 = 50000;
pub const TRC_CFG_NTASK: u32 = 150;
pub const TRC_CFG_NISR: u32 = 90;
pub const TRC_CFG_NQUEUE: u32 = 90;
pub const TRC_CFG_NSEMAPHORE: u32 = 90;
pub const TRC_CFG_NMUTEX: u32 = 90;
pub const TRC_CFG_NTIMER: u32 = 250;
pub const TRC_CFG_NEVENTGROUP: u32 = 90;
pub const TRC_CFG_NSTREAMBUFFER: u32 = 50;
pub const TRC_CFG_NMESSAGEBUFFER: u32 = 50;
pub const TRC_CFG_INCLUDE_FLOAT_SUPPORT: u32 = 0;
pub const TRC_CFG_SYMBOL_TABLE_SIZE: u32 = 8000;
pub const TRC_CFG_NAME_LEN_TASK: u32 = 15;
pub const TRC_CFG_NAME_LEN_ISR: u32 = 15;
pub const TRC_CFG_NAME_LEN_QUEUE: u32 = 15;
pub const TRC_CFG_NAME_LEN_SEMAPHORE: u32 = 15;
pub const TRC_CFG_NAME_LEN_MUTEX: u32 = 15;
pub const TRC_CFG_NAME_LEN_TIMER: u32 = 15;
pub const TRC_CFG_NAME_LEN_EVENTGROUP: u32 = 15;
pub const TRC_CFG_NAME_LEN_STREAMBUFFER: u32 = 15;
pub const TRC_CFG_NAME_LEN_MESSAGEBUFFER: u32 = 15;
pub const TRC_CFG_HEAP_SIZE_BELOW_16M: u32 = 0;
pub const TRC_CFG_USE_IMPLICIT_IFE_RULES: u32 = 1;
pub const TRC_CFG_USE_16BIT_OBJECT_HANDLES: u32 = 0;
pub const TRC_CFG_USE_TRACE_ASSERT: u32 = 1;
pub const TRC_CFG_USE_SEPARATE_USER_EVENT_BUFFER: u32 = 0;
pub const TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE: u32 = 200;
pub const TRC_CFG_UB_CHANNELS: u32 = 32;
pub const TRC_CFG_ISR_TAILCHAINING_THRESHOLD: u32 = 0;
pub const TRC_HWTC_TYPE: u32 = 1;
pub const TRC_HWTC_PERIOD: u32 = 0;
pub const TRC_HWTC_DIVISOR: u32 = 1;
pub const TRC_HWTC_FREQ_HZ: u32 = 100000;
pub const TRC_IRQ_PRIORITY_ORDER: u32 = 1;
pub const TRC_USE_TRACEALYZER_RECORDER: u32 = 1;
pub const FREERTOS_VERSION_NOT_SET: u32 = 0;
pub const TRC_FREERTOS_VERSION_7_3: u32 = 1;
pub const TRC_FREERTOS_VERSION_7_4: u32 = 2;
pub const TRC_FREERTOS_VERSION_7_5_OR_7_6: u32 = 3;
pub const TRC_FREERTOS_VERSION_8_X: u32 = 4;
pub const TRC_FREERTOS_VERSION_9_0_0: u32 = 5;
pub const TRC_FREERTOS_VERSION_9_0_1: u32 = 6;
pub const TRC_FREERTOS_VERSION_9_0_2: u32 = 7;
pub const TRC_FREERTOS_VERSION_10_0_0: u32 = 8;
pub const TRC_FREERTOS_VERSION_9_X: u32 = 42;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 1;
pub const TRACE_KERNEL_VERSION: u32 = 6817;
pub const TRACE_TICK_RATE_HZ: u32 = 1000;
pub const TRACE_NCLASSES: u32 = 9;
pub const TRACE_KERNEL_OBJECT_COUNT: u32 = 950;
pub const PropertyTableSizeQueue: u32 = 16;
pub const PropertyTableSizeSemaphore: u32 = 16;
pub const PropertyTableSizeMutex: u32 = 16;
pub const PropertyTableSizeTask: u32 = 19;
pub const PropertyTableSizeISR: u32 = 17;
pub const PropertyTableSizeTimer: u32 = 16;
pub const PropertyTableSizeEventGroup: u32 = 19;
pub const PropertyTableSizeStreamBuffer: u32 = 19;
pub const PropertyTableSizeMessageBuffer: u32 = 19;
pub const StartIndexQueue: u32 = 0;
pub const StartIndexSemaphore: u32 = 1440;
pub const StartIndexMutex: u32 = 2880;
pub const StartIndexTask: u32 = 4320;
pub const StartIndexISR: u32 = 7170;
pub const StartIndexTimer: u32 = 8700;
pub const StartIndexEventGroup: u32 = 12700;
pub const StartIndexStreamBuffer: u32 = 14410;
pub const StartIndexMessageBuffer: u32 = 15360;
pub const TRACE_OBJECT_TABLE_SIZE: u32 = 16310;
pub const NULL_EVENT: u32 = 0;
pub const EVENTGROUP_DIV: u32 = 1;
pub const DIV_XPS: u32 = 1;
pub const DIV_TASK_READY: u32 = 2;
pub const DIV_NEW_TIME: u32 = 3;
pub const EVENTGROUP_TS: u32 = 4;
pub const TS_ISR_BEGIN: u32 = 4;
pub const TS_ISR_RESUME: u32 = 5;
pub const TS_TASK_BEGIN: u32 = 6;
pub const TS_TASK_RESUME: u32 = 7;
pub const EVENTGROUP_OBJCLOSE_NAME_TRCSUCCESS: u32 = 8;
pub const EVENTGROUP_OBJCLOSE_PROP_TRCSUCCESS: u32 = 16;
pub const EVENTGROUP_CREATE_OBJ_TRCSUCCESS: u32 = 24;
pub const EVENTGROUP_SEND_TRCSUCCESS: u32 = 32;
pub const EVENTGROUP_RECEIVE_TRCSUCCESS: u32 = 40;
pub const EVENTGROUP_SEND_FROM_ISR_TRCSUCCESS: u32 = 48;
pub const EVENTGROUP_RECEIVE_FROM_ISR_TRCSUCCESS: u32 = 56;
pub const EVENTGROUP_KSE_TRCFAILED: u32 = 64;
pub const EVENTGROUP_CREATE_OBJ_TRCFAILED: u32 = 64;
pub const EVENTGROUP_SEND_TRCFAILED: u32 = 72;
pub const EVENTGROUP_RECEIVE_TRCFAILED: u32 = 80;
pub const EVENTGROUP_SEND_FROM_ISR_TRCFAILED: u32 = 88;
pub const EVENTGROUP_RECEIVE_FROM_ISR_TRCFAILED: u32 = 96;
pub const EVENTGROUP_RECEIVE_TRCBLOCK: u32 = 104;
pub const EVENTGROUP_SEND_TRCBLOCK: u32 = 112;
pub const EVENTGROUP_PEEK_TRCSUCCESS: u32 = 120;
pub const EVENTGROUP_DELETE_OBJ_TRCSUCCESS: u32 = 128;
pub const EVENTGROUP_OTHERS: u32 = 136;
pub const TASK_DELAY_UNTIL: u32 = 136;
pub const TASK_DELAY: u32 = 137;
pub const TASK_SUSPEND: u32 = 138;
pub const TASK_RESUME: u32 = 139;
pub const TASK_RESUME_FROM_ISR: u32 = 140;
pub const TASK_PRIORITY_SET: u32 = 141;
pub const TASK_PRIORITY_INHERIT: u32 = 142;
pub const TASK_PRIORITY_DISINHERIT: u32 = 143;
pub const EVENTGROUP_MISC_PLACEHOLDER: u32 = 144;
pub const PEND_FUNC_CALL: u32 = 144;
pub const PEND_FUNC_CALL_FROM_ISR: u32 = 145;
pub const PEND_FUNC_CALL_TRCFAILED: u32 = 146;
pub const PEND_FUNC_CALL_FROM_ISR_TRCFAILED: u32 = 147;
pub const MEM_MALLOC_SIZE: u32 = 148;
pub const MEM_MALLOC_ADDR: u32 = 149;
pub const MEM_FREE_SIZE: u32 = 150;
pub const MEM_FREE_ADDR: u32 = 151;
pub const EVENTGROUP_USEREVENT: u32 = 152;
pub const USER_EVENT: u32 = 152;
pub const USER_EVENT_LAST: u32 = 167;
pub const EVENTGROUP_SYS: u32 = 168;
pub const XTS8: u32 = 168;
pub const XTS16: u32 = 169;
pub const EVENT_BEING_WRITTEN: u32 = 170;
pub const RESERVED_DUMMY_CODE: u32 = 171;
pub const LOW_POWER_BEGIN: u32 = 172;
pub const LOW_POWER_END: u32 = 173;
pub const XID: u32 = 174;
pub const XTS16L: u32 = 175;
pub const EVENTGROUP_TIMER: u32 = 176;
pub const TIMER_CREATE: u32 = 176;
pub const TIMER_START: u32 = 177;
pub const TIMER_RST: u32 = 178;
pub const TIMER_STOP: u32 = 179;
pub const TIMER_CHANGE_PERIOD: u32 = 180;
pub const TIMER_DELETE_OBJ: u32 = 181;
pub const TIMER_START_FROM_ISR: u32 = 182;
pub const TIMER_RESET_FROM_ISR: u32 = 183;
pub const TIMER_STOP_FROM_ISR: u32 = 184;
pub const TIMER_CREATE_TRCFAILED: u32 = 185;
pub const TIMER_START_TRCFAILED: u32 = 186;
pub const TIMER_RESET_TRCFAILED: u32 = 187;
pub const TIMER_STOP_TRCFAILED: u32 = 188;
pub const TIMER_CHANGE_PERIOD_TRCFAILED: u32 = 189;
pub const TIMER_DELETE_TRCFAILED: u32 = 190;
pub const TIMER_START_FROM_ISR_TRCFAILED: u32 = 191;
pub const TIMER_RESET_FROM_ISR_TRCFAILED: u32 = 192;
pub const TIMER_STOP_FROM_ISR_TRCFAILED: u32 = 193;
pub const EVENTGROUP_EG: u32 = 194;
pub const EVENT_GROUP_CREATE: u32 = 194;
pub const EVENT_GROUP_CREATE_TRCFAILED: u32 = 195;
pub const EVENT_GROUP_SYNC_TRCBLOCK: u32 = 196;
pub const EVENT_GROUP_SYNC_END: u32 = 197;
pub const EVENT_GROUP_WAIT_BITS_TRCBLOCK: u32 = 198;
pub const EVENT_GROUP_WAIT_BITS_END: u32 = 199;
pub const EVENT_GROUP_CLEAR_BITS: u32 = 200;
pub const EVENT_GROUP_CLEAR_BITS_FROM_ISR: u32 = 201;
pub const EVENT_GROUP_SET_BITS: u32 = 202;
pub const EVENT_GROUP_DELETE_OBJ: u32 = 203;
pub const EVENT_GROUP_SYNC_END_TRCFAILED: u32 = 204;
pub const EVENT_GROUP_WAIT_BITS_END_TRCFAILED: u32 = 205;
pub const EVENT_GROUP_SET_BITS_FROM_ISR: u32 = 206;
pub const EVENT_GROUP_SET_BITS_FROM_ISR_TRCFAILED: u32 = 207;
pub const TASK_INSTANCE_FINISHED_NEXT_KSE: u32 = 208;
pub const TASK_INSTANCE_FINISHED_DIRECT: u32 = 209;
pub const TRACE_TASK_NOTIFY_GROUP: u32 = 210;
pub const TRACE_TASK_NOTIFY: u32 = 210;
pub const TRACE_TASK_NOTIFY_TAKE: u32 = 211;
pub const TRACE_TASK_NOTIFY_TAKE_TRCBLOCK: u32 = 212;
pub const TRACE_TASK_NOTIFY_TAKE_TRCFAILED: u32 = 213;
pub const TRACE_TASK_NOTIFY_WAIT: u32 = 214;
pub const TRACE_TASK_NOTIFY_WAIT_TRCBLOCK: u32 = 215;
pub const TRACE_TASK_NOTIFY_WAIT_TRCFAILED: u32 = 216;
pub const TRACE_TASK_NOTIFY_FROM_ISR: u32 = 217;
pub const TRACE_TASK_NOTIFY_GIVE_FROM_ISR: u32 = 218;
pub const TIMER_EXPIRED: u32 = 219;
pub const EVENTGROUP_PEEK_TRCBLOCK: u32 = 220;
pub const EVENTGROUP_PEEK_TRCFAILED: u32 = 223;
pub const EVENTGROUP_STREAMBUFFER_DIV: u32 = 226;
pub const TRACE_STREAMBUFFER_RESET: u32 = 226;
pub const TRACE_MESSAGEBUFFER_RESET: u32 = 227;
pub const TRACE_STREAMBUFFER_OBJCLOSE_NAME_TRCSUCCESS: u32 = 228;
pub const TRACE_MESSAGEBUFFER_OBJCLOSE_NAME_TRCSUCCESS: u32 = 229;
pub const TRACE_STREAMBUFFER_OBJCLOSE_PROP_TRCSUCCESS: u32 = 230;
pub const TRACE_MESSAGEBUFFER_OBJCLOSE_PROP_TRCSUCCESS: u32 = 231;
pub const TRACE_STREAMBUFFER_CREATE_OBJ_TRCSUCCESS: u32 = 28;
pub const TRACE_STREAMBUFFER_CREATE_OBJ_TRCFAILED: u32 = 68;
pub const TRACE_STREAMBUFFER_DELETE_OBJ_TRCSUCCESS: u32 = 132;
pub const TRACE_STREAMBUFFER_SEND_TRCSUCCESS: u32 = 35;
pub const TRACE_STREAMBUFFER_SEND_TRCBLOCK: u32 = 115;
pub const TRACE_STREAMBUFFER_SEND_TRCFAILED: u32 = 75;
pub const TRACE_STREAMBUFFER_RECEIVE_TRCSUCCESS: u32 = 43;
pub const TRACE_STREAMBUFFER_RECEIVE_TRCBLOCK: u32 = 107;
pub const TRACE_STREAMBUFFER_RECEIVE_TRCFAILED: u32 = 83;
pub const TRACE_STREAMBUFFER_SEND_FROM_ISR_TRCSUCCESS: u32 = 51;
pub const TRACE_STREAMBUFFER_SEND_FROM_ISR_TRCFAILED: u32 = 91;
pub const TRACE_STREAMBUFFER_RECEIVE_FROM_ISR_TRCSUCCESS: u32 = 59;
pub const TRACE_STREAMBUFFER_RECEIVE_FROM_ISR_TRCFAILED: u32 = 99;
pub const TRACE_MESSAGEBUFFER_CREATE_OBJ_TRCSUCCESS: u32 = 29;
pub const TRACE_MESSAGEBUFFER_CREATE_OBJ_TRCFAILED: u32 = 69;
pub const TRACE_MESSAGEBUFFER_DELETE_OBJ_TRCSUCCESS: u32 = 133;
pub const TRACE_MESSAGEBUFFER_SEND_TRCSUCCESS: u32 = 36;
pub const TRACE_MESSAGEBUFFER_SEND_TRCBLOCK: u32 = 116;
pub const TRACE_MESSAGEBUFFER_SEND_TRCFAILED: u32 = 76;
pub const TRACE_MESSAGEBUFFER_RECEIVE_TRCSUCCESS: u32 = 44;
pub const TRACE_MESSAGEBUFFER_RECEIVE_TRCBLOCK: u32 = 108;
pub const TRACE_MESSAGEBUFFER_RECEIVE_TRCFAILED: u32 = 84;
pub const TRACE_MESSAGEBUFFER_SEND_FROM_ISR_TRCSUCCESS: u32 = 52;
pub const TRACE_MESSAGEBUFFER_SEND_FROM_ISR_TRCFAILED: u32 = 92;
pub const TRACE_MESSAGEBUFFER_RECEIVE_FROM_ISR_TRCSUCCESS: u32 = 60;
pub const TRACE_MESSAGEBUFFER_RECEIVE_FROM_ISR_TRCFAILED: u32 = 100;
pub const TRC_CFG_INCLUDE_OBJECT_DELETE: u32 = 0;
pub const TASK_STATE_INSTANCE_NOT_ACTIVE: u32 = 0;
pub const TASK_STATE_INSTANCE_ACTIVE: u32 = 1;
pub const NEventCodes: u32 = 256;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portINTERRUPT_YIELD: u32 = 0;
pub const portINTERRUPT_TICK: u32 = 1;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configUSE_TIME_SLICING: u32 = 1;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 0;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
extern "C" {
    pub fn add(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn ulGetRunTimeCounterValue() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn vConfigureTimerForRunTimeStats();
}
extern "C" {
    pub fn vAssertCalled(
        ulLine: ::std::os::raw::c_ulong,
        pcFileName: *const ::std::os::raw::c_char,
    );
}
pub type traceString = u16;
pub type traceUBChannel = u8;
pub type traceObjectClass = u8;
pub type traceHandle = u8;
extern "C" {
    #[doc = " vTraceSetQueueName(void* object, const char* name)"]
    #[doc = ""]
    #[doc = " Parameter object: pointer to the Queue that shall be named"]
    #[doc = " Parameter name: the name to set (const string literal)"]
    #[doc = ""]
    #[doc = " Sets a name for Queue objects for display in Tracealyzer."]
    pub fn vTraceSetQueueName(
        object: *mut ::core::ffi::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " vTraceSetSemaphoreName(void* object, const char* name)"]
    #[doc = ""]
    #[doc = " Parameter object: pointer to the Semaphore that shall be named"]
    #[doc = " Parameter name: the name to set (const string literal)"]
    #[doc = ""]
    #[doc = " Sets a name for Semaphore objects for display in Tracealyzer."]
    pub fn vTraceSetSemaphoreName(
        object: *mut ::core::ffi::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " vTraceSetMutexName(void* object, const char* name)"]
    #[doc = ""]
    #[doc = " Parameter object: pointer to the Mutex that shall be named"]
    #[doc = " Parameter name: the name to set (const string literal)"]
    #[doc = ""]
    #[doc = " Sets a name for Semaphore objects for display in Tracealyzer."]
    pub fn vTraceSetMutexName(
        object: *mut ::core::ffi::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " vTraceSetEventGroupName(void* object, const char* name)"]
    #[doc = ""]
    #[doc = " Parameter object: pointer to the EventGroup that shall be named"]
    #[doc = " Parameter name: the name to set (const string literal)"]
    #[doc = ""]
    #[doc = " Sets a name for EventGroup objects for display in Tracealyzer."]
    pub fn vTraceSetEventGroupName(
        object: *mut ::core::ffi::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " vTraceSetStreamBufferName(void* object, const char* name)"]
    #[doc = ""]
    #[doc = " Parameter object: pointer to the StreamBuffer that shall be named"]
    #[doc = " Parameter name: the name to set (const string literal)"]
    #[doc = ""]
    #[doc = " Sets a name for StreamBuffer objects for display in Tracealyzer."]
    pub fn vTraceSetStreamBufferName(
        object: *mut ::core::ffi::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " vTraceSetMessageBufferName(void* object, const char* name)"]
    #[doc = ""]
    #[doc = " Parameter object: pointer to the MessageBuffer that shall be named"]
    #[doc = " Parameter name: the name to set (const string literal)"]
    #[doc = ""]
    #[doc = " Sets a name for MessageBuffer objects for display in Tracealyzer."]
    pub fn vTraceSetMessageBufferName(
        object: *mut ::core::ffi::c_void,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Note: Setting names for event groups is difficult to support, this has been"]
    #[doc = " excluded intentionally. This since we don't know if event_groups.c is"]
    #[doc = " included in the build, so referencing it from the recorder may cause errors."]
    pub fn prvTraceGetCurrentTaskHandle() -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn prvTraceIsSchedulerSuspended() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut CurrentFilterMask: u16;
}
extern "C" {
    pub static mut CurrentFilterGroup: u16;
}
extern "C" {
    pub fn prvTraceGetQueueType(handle: *mut ::core::ffi::c_void) -> u8;
}
extern "C" {
    pub fn prvTraceGetTaskNumberLow16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceGetTaskNumberHigh16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceSetTaskNumberLow16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceSetTaskNumberHigh16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceGetQueueNumberLow16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceGetQueueNumberHigh16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceSetQueueNumberLow16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceSetQueueNumberHigh16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceGetTimerNumberLow16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceGetTimerNumberHigh16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceSetTimerNumberLow16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceSetTimerNumberHigh16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceGetEventGroupNumberLow16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceGetEventGroupNumberHigh16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceSetEventGroupNumberLow16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceSetEventGroupNumberHigh16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceGetStreamBufferNumberLow16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceGetStreamBufferNumberHigh16(handle: *mut ::core::ffi::c_void) -> u16;
}
extern "C" {
    pub fn prvTraceSetStreamBufferNumberLow16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub fn prvTraceSetStreamBufferNumberHigh16(handle: *mut ::core::ffi::c_void, value: u16);
}
extern "C" {
    pub static mut uiInEventGroupSetBitsFromISR: ::std::os::raw::c_int;
}
extern "C" {
    pub fn vTraceInitObjectPropertyTable();
}
extern "C" {
    pub fn vTraceInitObjectHandleStack();
}
extern "C" {
    pub fn pszTraceGetErrorNotEnoughHandles(
        objectclass: traceObjectClass,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut TraceQueueClassTable: [traceObjectClass; 5usize];
}
extern "C" {
    pub fn vTraceStoreMemMangEvent(ecode: u32, address: u32, size: i32);
}
extern "C" {
    pub static mut trcWarningChannel: traceString;
}
extern "C" {
    #[doc = " vTraceEnable(int startOption);"]
    #[doc = ""]
    #[doc = " Initializes and optionally starts the trace, depending on the start option."]
    #[doc = " To use the trace recorder, the startup must call vTraceEnable before any RTOS"]
    #[doc = " calls are made (including \"create\" calls). Three start options are provided:"]
    #[doc = ""]
    #[doc = " TRC_START: Starts the tracing directly. In snapshot mode this allows for"]
    #[doc = " starting the trace at any point in your code, assuming vTraceEnable(TRC_INIT)"]
    #[doc = " has been called in the startup."]
    #[doc = " Can also be used for streaming without Tracealyzer control, e.g. to a local"]
    #[doc = " flash file system (assuming such a \"stream port\", see trcStreamingPort.h)."]
    #[doc = ""]
    #[doc = " TRC_START_AWAIT_HOST: For streaming mode only. Initializes the trace recorder"]
    #[doc = " if necessary and waits for a Start command from Tracealyzer (\"Start Recording\""]
    #[doc = " button). This call is intentionally blocking! By calling vTraceEnable with"]
    #[doc = " this option from the startup code, you start tracing at this point and capture"]
    #[doc = " the early events."]
    #[doc = ""]
    #[doc = " TRC_INIT: Initializes the trace recorder, but does not start the tracing."]
    #[doc = " In snapshot mode, this must be followed by a vTraceEnable(TRC_START) sometime"]
    #[doc = " later."]
    #[doc = ""]
    #[doc = " Usage examples:"]
    #[doc = ""]
    #[doc = " Snapshot trace, from startup:"]
    #[doc = " \t<board init>"]
    #[doc = " \tvTraceEnable(TRC_START);"]
    #[doc = " \t<RTOS init>"]
    #[doc = ""]
    #[doc = " Snapshot trace, from a later point:"]
    #[doc = " \t<board init>"]
    #[doc = " \tvTraceEnable(TRC_INIT);"]
    #[doc = " \t<RTOS init>"]
    #[doc = " \t..."]
    #[doc = " \tvTraceEnable(TRC_START); // e.g., in task context, at some relevant event"]
    #[doc = ""]
    #[doc = " Streaming trace, from startup:"]
    #[doc = "\t<board init>"]
    #[doc = "\tvTraceEnable(TRC_START_AWAIT_HOST); // Blocks!"]
    #[doc = "\t<RTOS init>"]
    #[doc = ""]
    #[doc = " Streaming trace, from a later point:"]
    #[doc = "\t<board startup>"]
    #[doc = "\tvTraceEnable(TRC_INIT);"]
    #[doc = "\t<RTOS startup>"]
    pub fn vTraceEnable(startOption: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vTracePrintF(chn: traceString, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vTracePrint(chn: traceString, str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn xTraceRegisterString(name: *const ::std::os::raw::c_char) -> traceString;
}
extern "C" {
    #[doc = " xTraceSetISRProperties"]
    #[doc = ""]
    #[doc = " Stores a name and priority level for an Interrupt Service Routine, to allow"]
    #[doc = " for better visualization. Returns a traceHandle used by vTraceStoreISRBegin."]
    #[doc = ""]
    #[doc = " Example:"]
    #[doc = "\t #define PRIO_ISR_TIMER1 3 // the hardware priority of the interrupt"]
    #[doc = "\t ..."]
    #[doc = "\t traceHandle Timer1Handle = xTraceSetISRProperties(\"ISRTimer1\", PRIO_ISR_TIMER1);"]
    #[doc = "\t ..."]
    #[doc = "\t void ISR_handler()"]
    #[doc = "\t {"]
    #[doc = "\t\t vTraceStoreISRBegin(Timer1Handle);"]
    #[doc = "\t\t ..."]
    #[doc = "\t\t vTraceStoreISREnd(0);"]
    #[doc = "\t }"]
    pub fn xTraceSetISRProperties(name: *const ::std::os::raw::c_char, priority: u8)
        -> traceHandle;
}
extern "C" {
    #[doc = " vTraceStoreISRBegin"]
    #[doc = ""]
    #[doc = " Registers the beginning of an Interrupt Service Routine, using a traceHandle"]
    #[doc = " provided by xTraceSetISRProperties."]
    #[doc = ""]
    #[doc = " Example:"]
    #[doc = "\t #define PRIO_ISR_TIMER1 3 // the hardware priority of the interrupt"]
    #[doc = "\t ..."]
    #[doc = "\t traceHandle Timer1Handle = xTraceSetISRProperties(\"ISRTimer1\", PRIO_ISR_TIMER1);"]
    #[doc = "\t ..."]
    #[doc = "\t void ISR_handler()"]
    #[doc = "\t {"]
    #[doc = "\t\t vTraceStoreISRBegin(Timer1Handle);"]
    #[doc = "\t\t ..."]
    #[doc = "\t\t vTraceStoreISREnd(0);"]
    #[doc = "\t }"]
    pub fn vTraceStoreISRBegin(handle: traceHandle);
}
extern "C" {
    #[doc = " vTraceStoreISREnd"]
    #[doc = ""]
    #[doc = " Registers the end of an Interrupt Service Routine."]
    #[doc = ""]
    #[doc = " The parameter pendingISR indicates if the interrupt has requested a"]
    #[doc = " task-switch (= 1), e.g., by signaling a semaphore. Otherwise (= 0) the"]
    #[doc = " interrupt is assumed to return to the previous context."]
    #[doc = ""]
    #[doc = " Example:"]
    #[doc = "\t #define PRIO_OF_ISR_TIMER1 3 // the hardware priority of the interrupt"]
    #[doc = "\t traceHandle traceHandleIsrTimer1 = 0; // The ID set by the recorder"]
    #[doc = "\t ..."]
    #[doc = "\t traceHandleIsrTimer1 = xTraceSetISRProperties(\"ISRTimer1\", PRIO_OF_ISR_TIMER1);"]
    #[doc = "\t ..."]
    #[doc = "\t void ISR_handler()"]
    #[doc = "\t {"]
    #[doc = "\t\t vTraceStoreISRBegin(traceHandleIsrTimer1);"]
    #[doc = "\t\t ..."]
    #[doc = "\t\t vTraceStoreISREnd(0);"]
    #[doc = "\t }"]
    pub fn vTraceStoreISREnd(isTaskSwitchRequired: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " vTraceInstanceFinishNow"]
    #[doc = ""]
    #[doc = " Creates an event that ends the current task instance at this very instant."]
    #[doc = " This makes the viewer to splits the current fragment at this point and begin"]
    #[doc = " a new actor instance, even if no task-switch has occurred."]
    pub fn vTraceInstanceFinishedNow();
}
extern "C" {
    #[doc = " vTraceInstanceFinishedNext"]
    #[doc = ""]
    #[doc = " Marks the current \"task instance\" as finished on the next kernel call."]
    #[doc = ""]
    #[doc = " If that kernel call is blocking, the instance ends after the blocking event"]
    #[doc = " and the corresponding return event is then the start of the next instance."]
    #[doc = " If the kernel call is not blocking, the viewer instead splits the current"]
    #[doc = " fragment right before the kernel call, which makes this call the first event"]
    #[doc = " of the next instance."]
    pub fn vTraceInstanceFinishedNext();
}
extern "C" {
    #[doc = " xTraceGetLastError"]
    #[doc = ""]
    #[doc = " Returns the last error or warning as a string, or NULL if none."]
    pub fn xTraceGetLastError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " vTraceClearError"]
    #[doc = ""]
    #[doc = " Clears any errors."]
    pub fn vTraceClearError();
}
extern "C" {
    #[doc = " vTraceStop"]
    #[doc = ""]
    #[doc = " Stops the recording. Intended for snapshot mode or if streaming without"]
    #[doc = " Tracealyzer control (e.g., to a device file system)."]
    pub fn vTraceStop();
}
extern "C" {
    #[doc = " vTraceSetFrequency"]
    #[doc = ""]
    #[doc = " Registers the clock rate of the time source for the event timestamping."]
    #[doc = " This is normally not required, but if the default value (TRC_HWTC_FREQ_HZ)"]
    #[doc = " should be incorrect for your setup, you can override it using this function."]
    #[doc = ""]
    #[doc = " Must be called prior to vTraceEnable, and the time source is assumed to"]
    #[doc = " have a fixed clock frequency after the startup."]
    #[doc = ""]
    #[doc = " Note that, in snapshot mode, the value is divided by the TRC_HWTC_DIVISOR."]
    #[doc = " This is a software \"prescaler\" that is also applied on the timestamps."]
    pub fn vTraceSetFrequency(frequency: u32);
}
extern "C" {
    #[doc = " xTraceIsRecordingEnabled"]
    #[doc = ""]
    #[doc = " Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0."]
    pub fn xTraceIsRecordingEnabled() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " vTraceSetFilterGroup"]
    #[doc = ""]
    #[doc = " Sets the \"filter group\" to assign when creating RTOS objects, such as tasks,"]
    #[doc = " queues, semaphores and mutexes. This together with vTraceSetFilterMask"]
    #[doc = " allows you to control what events that are recorded, based on the"]
    #[doc = " objects they refer to."]
    #[doc = ""]
    #[doc = " There are 16 filter groups named FilterGroup0 .. FilterGroup15."]
    #[doc = ""]
    #[doc = " Note: We don't recommend filtering out the Idle task, so make sure to call"]
    #[doc = " vTraceSetFilterGroup just before initializing the RTOS, in order to assign"]
    #[doc = " such \"default\" objects to the right Filter Group (typically group 0)."]
    #[doc = ""]
    #[doc = " Example:"]
    #[doc = ""]
    #[doc = "\t\t// Assign tasks T1 to FilterGroup0 (default)"]
    #[doc = "\t\t<Create Task T1>"]
    #[doc = ""]
    #[doc = "\t\t// Assign Q1 and Q2 to FilterGroup1"]
    #[doc = "\t\tvTraceSetFilterGroup(FilterGroup1);"]
    #[doc = "\t\t<Create Queue Q1>"]
    #[doc = "\t\t<Create Queue Q2>"]
    #[doc = ""]
    #[doc = "\t\t// Assigns Q3 to FilterGroup2"]
    #[doc = "\t\tvTraceSetFilterGroup(FilterGroup2);"]
    #[doc = "\t\t<Create Queue Q3>"]
    #[doc = ""]
    #[doc = "\t\t// Only include FilterGroup0 and FilterGroup2, exclude FilterGroup1 (Q1 and Q2) from the trace"]
    #[doc = "\t\tvTraceSetFilterMask( FilterGroup0 | FilterGroup2 );"]
    #[doc = ""]
    #[doc = "\t\t// Assign the default RTOS objects (e.g. Idle task) to FilterGroup0"]
    #[doc = "\t\tvTraceSetFilterGroup(FilterGroup0);"]
    #[doc = "\t\t<Start the RTOS scheduler>"]
    #[doc = ""]
    #[doc = " Note that you may define your own names for the filter groups using"]
    #[doc = " preprocessor definitions, to make the code easier to understand."]
    #[doc = ""]
    #[doc = " Example:"]
    #[doc = ""]
    #[doc = "\t\t#define BASE FilterGroup0"]
    #[doc = "\t\t#define USB_EVENTS FilterGroup1"]
    #[doc = "\t\t#define CAN_EVENTS FilterGroup2"]
    #[doc = ""]
    #[doc = " Note that filtering per event type (regardless of object) is also available"]
    #[doc = " in trcConfig.h."]
    pub fn vTraceSetFilterGroup(filterGroup: u16);
}
extern "C" {
    #[doc = " vTraceSetFilterMask"]
    #[doc = ""]
    #[doc = " Sets the \"filter mask\" that is used to filter the events by object. This can"]
    #[doc = " be used to reduce the trace data rate, i.e., if your streaming interface is"]
    #[doc = " a bottleneck or if you want longer snapshot traces without increasing the"]
    #[doc = " buffer size."]
    #[doc = ""]
    #[doc = " Note: There are two kinds of filters in the recorder. The other filter type"]
    #[doc = " excludes all events of certain kinds (e.g., OS ticks). See trcConfig.h."]
    #[doc = ""]
    #[doc = " The filtering is based on bitwise AND with the Filter Group ID, assigned"]
    #[doc = " to RTOS objects such as tasks, queues, semaphores and mutexes."]
    #[doc = " This together with vTraceSetFilterGroup allows you to control what"]
    #[doc = " events that are recorded, based on the objects they refer to."]
    #[doc = ""]
    #[doc = " See example for vTraceSetFilterGroup."]
    pub fn vTraceSetFilterMask(filterMask: u16);
}
#[doc = " TRACE_STOP_HOOK - Hook Pointer Data Type"]
#[doc = ""]
#[doc = " Declares a data type for a call back function that will be invoked whenever"]
#[doc = " the recorder is stopped."]
#[doc = ""]
#[doc = " Snapshot mode only!"]
pub type TRACE_STOP_HOOK = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut vTraceStopHookPtr: TRACE_STOP_HOOK;
}
extern "C" {
    #[doc = " vTraceSetStopHook"]
    #[doc = ""]
    #[doc = " Sets a function to be called when the recorder is stopped."]
    #[doc = ""]
    #[doc = " Snapshot mode only!"]
    pub fn vTraceSetStopHook(stopHookFunction: TRACE_STOP_HOOK);
}
extern "C" {
    #[doc = " uiTraceStart"]
    #[doc = ""]
    #[doc = " [DEPRECATED] Use vTraceEnable instead."]
    #[doc = ""]
    #[doc = " Starts the recorder. The recorder will not be started if an error has been"]
    #[doc = " indicated using prvTraceError, e.g. if any of the Nx constants in"]
    #[doc = " trcSnapshotConfig.h has a too small value (TRC_CFG_NTASK, TRC_CFG_NQUEUE, etc)."]
    #[doc = ""]
    #[doc = " Returns 1 if the recorder was started successfully."]
    #[doc = " Returns 0 if the recorder start was prevented due to a previous internal"]
    #[doc = " error. In that case, check xTraceGetLastError to get the error message."]
    #[doc = " Any error message is also presented when opening a trace file."]
    #[doc = ""]
    #[doc = " Snapshot mode only!"]
    pub fn uiTraceStart() -> u32;
}
extern "C" {
    #[doc = " vTraceStart"]
    #[doc = ""]
    #[doc = " [DEPRECATED] Use vTraceEnable instead."]
    #[doc = ""]
    #[doc = " Starts the recorder. The recorder will not be started if an error has been"]
    #[doc = " indicated using prvTraceError, e.g. if any of the Nx constants in"]
    #[doc = " trcSnapshotConfig.h has a too small value (TRC_CFG_NTASK, TRC_CFG_NQUEUE, etc)."]
    #[doc = ""]
    #[doc = " Snapshot mode only!"]
    pub fn vTraceStart();
}
extern "C" {
    #[doc = " vTraceClear"]
    #[doc = ""]
    #[doc = " Resets the recorder. Only necessary if a restart is desired - this is not"]
    #[doc = " needed in the startup initialization."]
    #[doc = ""]
    #[doc = " Snapshot mode only!"]
    pub fn vTraceClear();
}
extern "C" {
    pub fn prvTraceSetReadyEventsEnabled(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prvTraceStoreTaskReady(handle: traceHandle);
}
extern "C" {
    pub fn prvTraceStoreLowPower(flag: u32);
}
extern "C" {
    pub fn prvTraceStoreTaskswitch(task_handle: traceHandle);
}
extern "C" {
    pub fn prvTraceStoreKernelCall(eventcode: u32, objectClass: traceObjectClass, byteParam: u32);
}
extern "C" {
    pub fn prvTraceStoreKernelCallWithNumericParamOnly(evtcode: u32, param: u32);
}
extern "C" {
    pub fn prvTraceStoreKernelCallWithParam(
        evtcode: u32,
        objectClass: traceObjectClass,
        objectNumber: u32,
        param: u32,
    );
}
extern "C" {
    pub fn prvTraceSetTaskInstanceFinished(handle: traceHandle);
}
extern "C" {
    pub fn prvTraceSetPriorityProperty(objectclass: u8, id: traceHandle, value: u8);
}
extern "C" {
    pub fn prvTraceGetPriorityProperty(objectclass: u8, id: traceHandle) -> u8;
}
extern "C" {
    pub fn prvTraceSetObjectState(objectclass: u8, id: traceHandle, value: u8);
}
extern "C" {
    pub fn prvMarkObjectAsUsed(objectclass: traceObjectClass, handle: traceHandle);
}
extern "C" {
    pub fn prvTraceStoreObjectNameOnCloseEvent(
        evtcode: u8,
        handle: traceHandle,
        objectclass: traceObjectClass,
    );
}
extern "C" {
    pub fn prvTraceStoreObjectPropertiesOnCloseEvent(
        evtcode: u8,
        handle: traceHandle,
        objectclass: traceObjectClass,
    );
}
extern "C" {
    #[doc = " xTraceGetTraceBuffer"]
    #[doc = ""]
    #[doc = " Returns a pointer to the recorder data structure. Use this together with"]
    #[doc = " uiTraceGetTraceBufferSize if you wish to implement an own store/upload"]
    #[doc = " solution, e.g., in case a debugger connection is not available for uploading"]
    #[doc = " the data."]
    pub fn xTraceGetTraceBuffer() -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " uiTraceGetTraceBufferSize"]
    #[doc = ""]
    #[doc = " Gets the size of the recorder data structure. For use together with"]
    #[doc = " vTraceGetTraceBuffer if you wish to implement an own store/upload solution,"]
    #[doc = " e.g., in case a debugger connection is not available for uploading the data."]
    pub fn uiTraceGetTraceBufferSize() -> u32;
}
#[doc = " ObjectHandleStack"]
#[doc = " This data-structure is used to provide a mechanism for 1-byte trace object"]
#[doc = " handles. This way, only 1 byte is necessary instead of 4 bytes (a pointer)"]
#[doc = " when storing a reference to an object. This allows for up to 255 objects of"]
#[doc = " each object class active at any given moment. There can be more \"historic\""]
#[doc = " objects, that have been deleted - that number is only limited by the size of"]
#[doc = " the symbol table."]
#[doc = ""]
#[doc = " Note that handle zero (0) is not used, it is a code for an invalid handle."]
#[doc = ""]
#[doc = " This data structure keeps track of the FREE handles, not the handles in use."]
#[doc = " This data structure contains one stack per object class. When a handle is"]
#[doc = " allocated to an object, the next free handle is popped from the stack. When"]
#[doc = " a handle is released (on object delete), it is pushed back on the stack."]
#[doc = " Note that there is no initialization code that pushed the free handles"]
#[doc = " initially, that is not necessary due to the following optimization:"]
#[doc = ""]
#[doc = " The stack of handles (objectHandles) is initially all zeros. Since zero"]
#[doc = " is not a valid handle, that is a signal of additional handles needed."]
#[doc = " If a zero is received when popping a new handle, it is replaced by the"]
#[doc = " index of the popped handle instead."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct objectHandleStackType {
    pub indexOfNextAvailableHandle: [u16; 9usize],
    pub lowestIndexOfClass: [u16; 9usize],
    pub highestIndexOfClass: [u16; 9usize],
    pub handleCountWaterMarksOfClass: [u16; 9usize],
    pub objectHandles: [traceHandle; 950usize],
}
extern "C" {
    pub static mut objectHandleStacks: objectHandleStackType;
}
#[doc = " Object Property Table"]
#[doc = " The Object Table contains name and other properties of the objects (tasks,"]
#[doc = " queues, mutexes, etc). The below data structures defines the properties of"]
#[doc = " each object class and are used to cast the byte buffer into a cleaner format."]
#[doc = ""]
#[doc = " The values in the object table are continuously overwritten and always"]
#[doc = " represent the current state. If a property is changed during runtime, the OLD"]
#[doc = " value should be stored in the trace buffer, not the new value (since the new"]
#[doc = " value is found in the Object Property Table)."]
#[doc = ""]
#[doc = " For close events this mechanism is the old names are stored in the symbol"]
#[doc = " table), for \"priority set\" (the old priority is stored in the event data)"]
#[doc = " and for \"isActive\", where the value decides if the task switch event type"]
#[doc = " should be \"new\" or \"resume\"."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ObjectPropertyTableType {
    pub NumberOfObjectClasses: u32,
    pub ObjectPropertyTableSizeInBytes: u32,
    pub NumberOfObjectsPerClass: [traceHandle; 12usize],
    pub NameLengthPerClass: [u8; 12usize],
    pub TotalPropertyBytesPerClass: [u8; 12usize],
    pub StartIndexOfClass: [u16; 10usize],
    pub objbytes: [u8; 16312usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symbolTableType {
    pub symTableSize: u32,
    pub nextFreeSymbolIndex: u32,
    pub symbytes: [u8; 8000usize],
    pub latestEntryOfChecksum: [u16; 64usize],
}
#[doc = " The data structures of the different events, all 4 bytes long"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSEvent {
    pub type_: u8,
    pub objHandle: u8,
    pub dts: u16,
}
#[doc = " The data structures of the different events, all 4 bytes long"]
pub type TREvent = TSEvent;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LPEvent {
    pub type_: u8,
    pub dummy: u8,
    pub dts: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KernelCall {
    pub type_: u8,
    pub objHandle: u8,
    pub dts: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KernelCallWithParamAndHandle {
    pub type_: u8,
    pub objHandle: u8,
    pub param: u8,
    pub dts: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KernelCallWithParam16 {
    pub type_: u8,
    pub dts: u8,
    pub param: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ObjCloseNameEvent {
    pub type_: u8,
    pub objHandle: u8,
    pub symbolIndex: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ObjClosePropEvent {
    pub type_: u8,
    pub arg1: u8,
    pub arg2: u8,
    pub arg3: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TaskInstanceStatusEvent {
    pub type_: u8,
    pub unused1: u8,
    pub unused2: u8,
    pub dts: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UserEvent {
    pub type_: u8,
    pub dts: u8,
    pub payload: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTSEvent {
    pub type_: u8,
    pub xts_8: u8,
    pub xts_16: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XPSEvent {
    pub type_: u8,
    pub xps_8: u8,
    pub xps_16: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MemEventSize {
    pub type_: u8,
    pub dts: u8,
    pub size: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MemEventAddr {
    pub type_: u8,
    pub addr_high: u8,
    pub addr_low: u16,
}
#[doc = " The main data structure, read by Tracealyzer from the RAM dump"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RecorderDataType {
    pub startmarker0: u8,
    pub startmarker1: u8,
    pub startmarker2: u8,
    pub startmarker3: u8,
    pub startmarker4: u8,
    pub startmarker5: u8,
    pub startmarker6: u8,
    pub startmarker7: u8,
    pub startmarker8: u8,
    pub startmarker9: u8,
    pub startmarker10: u8,
    pub startmarker11: u8,
    pub version: u16,
    pub minor_version: u8,
    pub irq_priority_order: u8,
    pub filesize: u32,
    pub numEvents: u32,
    pub maxEvents: u32,
    pub nextFreeIndex: u32,
    pub bufferIsFull: u32,
    pub frequency: u32,
    pub absTimeLastEvent: u32,
    pub absTimeLastEventSecond: u32,
    pub recorderActive: u32,
    pub isrTailchainingThreshold: u32,
    pub notused: [u8; 24usize],
    pub heapMemUsage: u32,
    pub debugMarker0: i32,
    pub isUsing16bitHandles: u32,
    pub ObjectPropertyTable: ObjectPropertyTableType,
    pub debugMarker1: i32,
    pub SymbolTable: symbolTableType,
    pub exampleFloatEncoding: u32,
    pub internalErrorOccured: u32,
    pub debugMarker2: i32,
    pub systemInfo: [::std::os::raw::c_char; 80usize],
    pub debugMarker3: i32,
    pub eventData: [u8; 200000usize],
    pub endOfSecondaryBlocks: u32,
    pub endmarker0: u8,
    pub endmarker1: u8,
    pub endmarker2: u8,
    pub endmarker3: u8,
    pub endmarker4: u8,
    pub endmarker5: u8,
    pub endmarker6: u8,
    pub endmarker7: u8,
    pub endmarker8: u8,
    pub endmarker9: u8,
    pub endmarker10: u8,
    pub endmarker11: u8,
}
extern "C" {
    pub static mut RecorderDataPtr: *mut RecorderDataType;
}
extern "C" {
    pub fn prvTraceError(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " prvTracePortGetTimeStamp"]
    #[doc = ""]
    #[doc = " Returns the current time based on the HWTC macros which provide a hardware"]
    #[doc = " isolation layer towards the hardware timer/counter."]
    #[doc = ""]
    #[doc = " The HWTC macros and prvTracePortGetTimeStamp is the main porting issue"]
    #[doc = " or the trace recorder library. Typically you should not need to change"]
    #[doc = " the code of prvTracePortGetTimeStamp if using the HWTC macros."]
    #[doc = ""]
    pub fn prvTracePortGetTimeStamp(puiTimestamp: *mut u32);
}
extern "C" {
    pub fn prvTraceGetObjectHandle(objectclass: traceObjectClass) -> traceHandle;
}
extern "C" {
    pub fn prvTraceFreeObjectHandle(objectclass: traceObjectClass, handle: traceHandle);
}
extern "C" {
    pub fn prvTraceSetObjectName(
        objectclass: traceObjectClass,
        handle: traceHandle,
        name: *const ::std::os::raw::c_char,
    );
}
pub type TaskFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>;
pub type StackType_t = size_t;
pub type BaseType_t = ::std::os::raw::c_long;
pub type UBaseType_t = ::std::os::raw::c_ulong;
pub type TickType_t = u32;
extern "C" {
    pub static mut xInsideInterrupt: BaseType_t;
}
extern "C" {
    pub fn vPortCloseRunningThread(
        pvTaskToDelete: *mut ::core::ffi::c_void,
        pxPendYield: *mut BaseType_t,
    );
}
extern "C" {
    pub fn vPortDeleteThread(pvThreadToDelete: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
extern "C" {
    pub fn vPortGenerateSimulatedInterrupt(ulInterruptNumber: u32);
}
extern "C" {
    pub fn vPortSetInterruptHandler(
        ulInterruptNumber: u32,
        pvHandler: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    );
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut ::core::ffi::c_void,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: size_t,
}
pub type HeapRegion_t = HeapRegion;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xHeapStats {
    pub xAvailableHeapSpaceInBytes: size_t,
    pub xSizeOfLargestFreeBlockInBytes: size_t,
    pub xSizeOfSmallestFreeBlockInBytes: size_t,
    pub xNumberOfFreeBlocks: size_t,
    pub xMinimumEverFreeBytesRemaining: size_t,
    pub xNumberOfSuccessfulAllocations: size_t,
    pub xNumberOfSuccessfulFrees: size_t,
}
pub type HeapStats_t = xHeapStats;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn vPortGetHeapStats(pxHeapStats: *mut HeapStats_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: size_t) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut ::core::ffi::c_void; 4usize],
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut ::core::ffi::c_void; 2usize],
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut ::core::ffi::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut ::core::ffi::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut ::core::ffi::c_void,
    pub ucDummy7: [u8; 12usize],
    pub uxDummy10: [UBaseType_t; 2usize],
    pub uxDummy12: [UBaseType_t; 2usize],
    pub pxDummy14: *mut ::core::ffi::c_void,
    pub ulDummy16: u32,
    pub ulDummy18: u32,
    pub ucDummy19: u8,
    pub uxDummy20: u8,
    pub ucDummy21: u8,
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut ::core::ffi::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub ucDummy6: u8,
    pub pvDummy7: *mut ::core::ffi::c_void,
    pub uxDummy8: UBaseType_t,
    pub ucDummy9: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut ::core::ffi::c_void,
    pub uxDummy2: UBaseType_t,
    _bindgen_union_align: u64,
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
    pub uxDummy3: UBaseType_t,
    pub ucDummy4: u8,
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut ::core::ffi::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut ::core::ffi::c_void,
    pub pvDummy6: TaskFunction_t,
    pub uxDummy7: UBaseType_t,
    pub ucDummy8: u8,
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [size_t; 4usize],
    pub pvDummy2: [*mut ::core::ffi::c_void; 3usize],
    pub ucDummy3: u8,
    pub uxDummy4: UBaseType_t,
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
